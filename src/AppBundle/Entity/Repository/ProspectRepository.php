<?php

namespace AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\User;
//use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * prospectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProspectRepository extends EntityRepository
{
    /**
     * Get prospects (for index)
     * 
     * @param User $user
     * @param int $firstResult
     * @param int $maxResults
     * @return Paginator
     */
    public function getProspectsQuery($user)
    {
//        $qb = $this->createQueryBuilder('p');
//        
//        $qb
//            ->select('p')
//            ->setFirstResult($firstResult)
//            ->setMaxResults($maxResults)
//            ->where('p.user = :user')
//            ->orderBy('p.creationDate', 'DESC')
//            ->setParameter('user', $user)
//        ;
//        
//        $pag = new Paginator($qb);
//        
//        return $pag;
        
        $query = $this->_em->createQuery('
            SELECT p
            FROM AppBundle:Prospect p
            WHERE p.user = :user
            ORDER BY p.creationDate DESC, p.id DESC
        ')
        ->setParameter('user', $user);
        
        return $query;
        
    }
    
    /**
     * Returns an array of all prospect ids from the user.
     * 
     * @param User $user
     * @return array
     */
    public function getProspectIds($user)
    {
        $qb = $this->_em->createQuery('
            SELECT p.id
            FROM AppBundle:Prospect p
            WHERE p.user = :user
        ')
         ->setParameter('user', $user);
        
        return $qb->getResult();
    }
    
    /**
     * Returns all flakes for that user.
     * 
     * @param User $user
     * @return array
     */
    public function getUserFlakes($user)
    {
        $qb = $this->_em->createQuery('
            SELECT r.flake
            FROM AppBundle:Prospect p LEFT JOIN p.relationship r
            WHERE p.user = :user
        ')
         ->setParameter('user', $user);
        
        return $qb->getResult();
    }
    
    /**
     * Returns all sources (Online or IRL) for that user.
     * 
     * @param User $user
     * @return array
     */
    public function getUserSources($user)
    {
        $qb = $this->_em->createQuery('
            SELECT s.wording
            FROM AppBundle:Prospect p LEFT JOIN p.source s
            WHERE p.user = :user
        ')
         ->setParameter('user', $user);
        
        return $qb->getResult();
    }
    
    
}
